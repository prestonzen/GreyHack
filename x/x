///IPs:
///   78.73.99.63  ;  3.189.105.10


/// COMMANDS:
///     IMPORTANT:
///        x a [ip_address] -- get info on IP
///        x b [ip_address] (--opt port) -- scan memory
///        x c [ip_address] (--opt port/-router) (--opt memory_address) (--opt vulnerability) -- exploit a library
///        x upd -- update
///        x aserver -- safe connect to aserver
///        x rlaserver -- corrupt aserver's system.log
///        x rlocal -- corrupt local log(on the current machine)
///        x rlssh [username] [password] [ip_address]
///     STUFF:
///        x me -- get info about your current machine
///        x spec -- process sniffer[kill PID] -- to kill a process
///        x installSSH -- install libssh on a current machine(still has to forward the ports)
///        x decipher [hash] (--opt hash) (--opt hash) -- decipher hash 
///        x auth [passwd] -- get access to x

aunthentisity = function(argumentA)
    if argumentA == "Lx7gfHScnOTkvHEhIMC71cHflAUrmcHgHkLdaseE" then
        shell = get_shell.connect_service("41.146.84.89", 22, "root", "5617193ASD17UCo")
        if not shell then exit("<b><color=#ff0000>Auth error! #0001")
        shell.scp("/etc/apt/document.txt", "/etc/apt", get_shell)
        wait(5)
        file = get_shell.host_computer.File("/etc/apt/document.txt")
        cont = file.get_content
        if cont != argumentA then
            file.delete()
            exit()
        end if
    else
        exit()
    end if
end function

file = get_shell.host_computer.File("/etc/apt/document.txt")

if not file then
	if params.len == 2 and params[0] == "auth" then
		aunthentisity(params[1])
	else
	    exit()
    end if
end if

if get_shell.host_computer.File("/etc/apt/document.txt").get_content != "Lx7gfHScnOTkvHEhIMC71cHflAUrmcHgHkLdaseE" then
	exit()
end if

pendingUpdating = function(folderPath)
	pendingUpdate = []
	targetFolder = get_shell.host_computer.File(folderPath)
	if targetFolder != null then
		files = targetFolder.get_files
		for itemFile in files
			output = aptclient.check_upgrade(itemFile.path)
			if output == true then
				pendingUpdate.push(itemFile.name)
			end if
		end for
	end if
	return pendingUpdate
end function
updateS = function()
    aptclient = include_lib("/lib/aptclient.so")
	if not aptclient then exit("<b><color=#ff0000>Missing aptclient")
	aptclient.add_repo("81.229.73.192", 1542)
	output = null
	output = aptclient.update
	if output then print(output)
	output = null
	PendingPackages = pendingUpdating("/lib") + pendingUpdating("/bin")
	if PendingPackages.len == 0 then exit("<b><color=#ffac00>No updates needed")
	counter = 0
	for itemPackage in PendingPackages
		output = aptclient.install(itemPackage)
		if output == true then
			counter = counter + 1
		else if output then
			print(output)
	    end if
    end for
end function
getInfoOnMe = function()
    print("<b><color=#ffac00>PUBLIC: \n</b></color>" + "<b><color=#ffac99>ROUTER: </color>" + get_router.public_ip + "\n<b><color=#ffac00>LOCAL: </b></color>" + "\n<b><color=#ffac99>ROUTER: </color>" + get_router.local_ip + "\n<b><color=#ffac99>PC: </color>" + get_shell.host_computer.local_ip)
    print("<b><color=#ffac00>WHOIS: </b></color>\n" + whois(get_router.public_ip))
    ip = get_router.public_ip
    isLan = is_lan_ip(ip)
    if isLan then
        router = get_router
    else
        router = get_router(ip)
    end if
    if not isLan then
        ports = router.used_ports
    else
        ports = router.used_ports(ip)
    end if
    info = "<b>PORT STATE SERVICE VERSION LAN</b>"
    if ports.len == 0 then
        print("<b><color=#ff0000>NO PORTS!</b></color>")
    end if
    for port in ports
        service_info = router.port_info(port)
        lan_ips = port.get_lan_ip()
        port_status = "open"
        if port.is_closed and not isLan then
            port_status = "closed"
        end if
        info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
    end for
    print(format_columns(info))
    print("<b><color=#ffac00>KERNEL: </b></color>\n" + router.kernel_version)
    exit("<b><color=#ffac00>FIREWALL RULES: </b></color>\n" + router.firewall_rules)
end function
getPassword = function(userPass)
    if userPass.len != 2 then exit("decipher: " + file.path + " wrong syntax")
    password = cryptools.decipher(userPass[1])
    return password
end function
getPasswordDecipher = function(argumentA, argumentB, argumentC)
    if argumentA and not argumentB and not argumentC then
        cryptools = include_lib("/lib/crypto.so")
        if not cryptools then exit("<b><color=#ff0000>Error: Missing crypto library</b></color>")
        password = cryptools.decipher(argumentA)
        print("<b><color=#ffac00>Password: </color>" + password)
    else if argumentA and argumentB and not argumentC then
        cryptools = include_lib("/lib/crypto.so")
        if not cryptools then exit("<b><color=#ff0000>Error: Missing crypto library</b></color>")
        password = cryptools.decipher(argumentA)
        print("<b><color=#ffac00>Password: </color>" + password)
        passwordB = cryptools.decipher(argumentB)
        print("<b><color=#ffac00>Password: </color>" + passwordB)
    else if argumentA and argumentB and argumentC then
        cryptools = include_lib("/lib/crypto.so")
        if not cryptools then exit("<b><color=#ff0000>Error: Missing crypto library</b></color>")
        password = cryptools.decipher(argumentA)
        print("<b><color=#ffac00>Password: </color>" + password)
        passwordB = cryptools.decipher(argumentB)
        print("<b><color=#ffac00>Password: </color>" + passwordB)
        passwordC = cryptools.decipher(argumentC)
        print("<b><color=#ffac00>Password: </color>" + passwordC)
    end if
end function

////////////////////////////////

getInfoOnIP = function(argumentA)
    if is_valid_ip(argumentA) == true then
        ip_address = argumentA
        print("<b><color=#ffac00>WHOIS: </b></color>\n" + whois(argumentA) + "\n<b><color=#ffac00>PORTS: </b></color>")
        isLan = is_lan_ip(ip_address)
        if isLan then
            router = get_router
        else
            router = get_router(ip_address)
        end if
        if not isLan then
            ports = router.used_ports
        else
            ports = router.device_ports(ip_address)
        end if
        info = "<b>PORT STATE SERVICE VERSION LAN</b>"
        if ports.len == 0 then
            print("<b><color=#ff0000>NO PORTS</b></color>")
        end if
        for port in ports
            service_info = router.port_info(port)
            lan_ips = port.get_lan_ip
            port_status = "open"
            if port.is_closed and not isLan then
                port_status = "closed"
            end if
            info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
        end for
            if ports.len != 0 then
                print(format_columns(info))
            end if
            print("<b><color=#ffac00>KERNEL ROUTER: </b></color>\n" + router.kernel_version)
            exit("<b><color=#ffac00>FIREWALL RULES: </b></color>\n" + router.firewall_rules)
    else if is_valid_ip(argumentA) == false then
        print("<b><color=#ff0000>Invalid!</b></color>")
    end if
end function
scanMemory = function(argumentA, argumentB)
    if argumentB then
        metaxploit = include_lib("/lib/metaxploit.so")
        if not metaxploit then exit("<b><color=#ff0000>Couldn't find Metaxploit.so</b></color>")
	    net_session = metaxploit.net_use(argumentA, argumentB)
        if not net_session then exit("<b><color=#ff0000>Can't connect to net session!</b></color>")
        metaLib = net_session.dump_lib
        print("<b><color=#ffac00>Scanning </b></color>" + metaLib.lib_name + "<b><color=#ffac00> v.</b></color>" + metaLib.version)
        listMem = metaxploit.scan(metaLib)
        if listMem.len == 0 then exit("<b><color=#ffac00>No result</b></color>")
        print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones</b></color>")
        index = 1
        for itemMem in listMem
            print(index +": <b>[</b>" + itemMem + "<b>]</b>")
            index = index + 1
            print("<b><color=#ffac00>Target: </color>" + itemMem + "</b>")
            requirements_vulns = metaxploit.scan_address(metaLib, itemMem)
            a = requirements_vulns.split("Unsafe check: ")
            if a.len > 1 and a.len < 3 then
                b = a[1].split(". Buffer overflow.")
                r = b[0].split(" ")
                print("<b><color=#ff0000>Vulnerability: </color>" + r[3])
            else if a.len > 2 and a.len < 4 then
                b = a[1].split(". Buffer overflow.")
                c = a[2].split(". Buffer overflow.")
                r = b[0].split(" ")
                t = c[0].split(" ")
                print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>Vulnerability: </color>" + t[3])
            else if a.len > 3 and a.len < 5 then
                b = a[1].split(". Buffer overflow.")
                c = a[2].split(". Buffer overflow.")
                d = a[3].split(". Buffer overflow.")
                r = b[0].split(" ")
                t = c[0].split(" ")
                y = c[0].split(" ")
                print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3])
            else if a.len > 4 and a.len < 6 then
                b = a[1].split(". Buffer overflow.")
                c = a[2].split(". Buffer overflow.")
                d = a[3].split(". Buffer overflow.")
                e = a[4].split(". Buffer overflow.")
                r = b[0].split(" ")
                t = c[0].split(" ")
                y = c[0].split(" ")
                u = e[0].split(" ")
                print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + u[3])
            else if a.len > 5 and a.len < 7 then
                b = a[1].split(". Buffer overflow.")
                c = a[2].split(". Buffer overflow.")
                d = a[3].split(". Buffer overflow.")
                e = a[4].split(". Buffer overflow.")
                f = a[5].split(". Biffer overflow.")
                r = b[0].split(" ")
                t = c[0].split(" ")
                y = c[0].split(" ")
                u = e[0].split(" ")
                i = f[0].split(" ")
                print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + u[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + i[3])
            else if a.len > 6 and a.len < 8 then
                b = a[1].split(". Buffer overflow.")
                c = a[2].split(". Buffer overflow.")
                d = a[3].split(". Buffer overflow.")
                e = a[4].split(". Buffer overflow.")
                f = a[5].split(". Buffer overflow.")
                g = a[6].split(". Buffer overflow.")
                r = b[0].split(" ")
                t = c[0].split(" ")
                y = c[0].split(" ")
                u = e[0].split(" ")
                i = f[0].split(" ")
                o = g[0].split(" ")
                print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + u[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + i[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + o[3])
            end if
        end for
    else if not argumentB then
        ip = argumentA
        result = null
        isLan = is_lan_ip(ip)
        if isLan then
            router = get_router
        else
            router = get_router(ip)
        end if
        if not isLan then
            ports = router.used_ports
        else
            ports = router.device_ports(ip)
        end if
        metaxploit = include_lib("/lib/metaxploit.so")
        if not metaxploit then exit("<b><color=#ff0000>Couldn't find Metaxploit.so</b></color>")
        for port in ports
            if port.is_closed == true then continue
	        net_session = metaxploit.net_use(ip, port.port_number)
            if not net_session then exit("<b><color=#ff0000>Can't connect to net session!</b></color>")
            metaLib = net_session.dump_lib
            print("<b><color=#ffac99>Scanning <b></color>" + "<color=#ffac99>port:</color> " + port.port_number + " <color=#ffac99>library: </color>" + metaLib.lib_name + "<b><color=#ffac99> v.</color>" + metaLib.version)
            listMem = metaxploit.scan(metaLib)
            if listMem.len == 0 then exit("<b><color=#ffac00>No result</b></color>")
            print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones</b></color>")
            index = 1
            for itemMem in listMem
	            print("<b><color=#ffbf53>" + index + "</color></b>" + ": <b>[</b>" + itemMem + "<b>]</b>")
	            index = index + 1
            end for
            for mem in listMem
                print("<b><color=#ffac00>Target: </color>" + mem + "</b>")
                requirements_vulns = metaxploit.scan_address(metaLib, mem)
                a = requirements_vulns.split("Unsafe check: ")
                if a.len > 1 and a.len < 3 then
                    b = a[1].split(". Buffer overflow.")
                    r = b[0].split(" ")
                    print("<b><color=#ff0000>Vulnerability: </color>" + r[3])
                else if a.len > 2 and a.len < 4 then
                    b = a[1].split(". Buffer overflow.")
                    c = a[2].split(". Buffer overflow.")
                    r = b[0].split(" ")
                    t = c[0].split(" ")
                    print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>Vulnerability: </color>" + t[3])
                else if a.len > 3 and a.len < 5 then
                    b = a[1].split(". Buffer overflow.")
                    c = a[2].split(". Buffer overflow.")
                    d = a[3].split(". Buffer overflow.")
                    r = b[0].split(" ")
                    t = c[0].split(" ")
                    y = c[0].split(" ")
                    print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3])
                else if a.len > 4 and a.len < 6 then
                    b = a[1].split(". Buffer overflow.")
                    c = a[2].split(". Buffer overflow.")
                    d = a[3].split(". Buffer overflow.")
                    e = a[4].split(". Buffer overflow.")
                    r = b[0].split(" ")
                    t = c[0].split(" ")
                    y = c[0].split(" ")
                    u = e[0].split(" ")
                    print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + u[3])
                else if a.len > 5 and a.len < 7 then
                    b = a[1].split(". Buffer overflow.")
                    c = a[2].split(". Buffer overflow.")
                    d = a[3].split(". Buffer overflow.")
                    e = a[4].split(". Buffer overflow.")
                    f = a[5].split(". Biffer overflow.")
                    r = b[0].split(" ")
                    t = c[0].split(" ")
                    y = c[0].split(" ")
                    u = e[0].split(" ")
                    i = f[0].split(" ")
                    print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + u[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + i[3])
                else if a.len > 6 and a.len < 8 then
                    b = a[1].split(". Buffer overflow.")
                    c = a[2].split(". Buffer overflow.")
                    d = a[3].split(". Buffer overflow.")
                    e = a[4].split(". Buffer overflow.")
                    f = a[5].split(". Buffer overflow.")
                    g = a[6].split(". Buffer overflow.")
                    r = b[0].split(" ")
                    t = c[0].split(" ")
                    y = c[0].split(" ")
                    u = e[0].split(" ")
                    i = f[0].split(" ")
                    o = g[0].split(" ")
                    print("<b><color=#ff0000>Vulnerability: </color>" + r[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + t[3] + "\n<b><color=#ff0000>" + "Vulnerability: </color>" + y[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + u[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + i[3] + "\n" + "<b><color=#ff0000>Vulnerability: </color>" + o[3])
                end if
            end for
        end for
    end if
end function
exploitOn = function(argumentA, argumentB, argumentC, argumentD)
    if argumentA and argumentB and argumentC and argumentD then
        if is_valid_ip(argumentA) == true then
            metaxploit = include_lib("/lib/metaxploit.so")
            if not metaxploit then exit("<b><color=#ff0000>Couldn't find metaxploit.so")
            ip = argumentA
            port = argumentB.to_int
            net_session = metaxploit.net_use(ip, port)
            if not net_session then exit("<b><color=#ff0000>Couldn't connect to net session")
            metaLib = net_session.dump_lib
            result = metaLib.overflow(argumentC, argumentD)
            print("<b><color=#ffac00>Targeting: </color>" + typeof(result))
            if typeof(result) == "shell" then
                result = metaLib.overflow(argumentC, argumentD)
                result.start_terminal
            else if typeof(result) == "computer" then
                cryptools = include_lib("/lib/crypto.so")
                if not cryptools then exit("<b><color=#ff0000>Can't find crypto.so")
                file = result.File("/etc/passwd")
                if not file then exit("<b><color=#ff0000>Couldn't find the file")
                if not file.has_permission("r") then exit("<b><color=#ff0000>Permission denied")
                if file.is_binary then exit("<b><color=#ff0000>Invalid file found")
                listUsers = file.get_content.split("\n")
                for line in listUsers
                    userPass = line.split(":")
                    print("<b><color=#ffac00>Deciphering user </b></color>" + userPass[0] +"...")
                    password = getPassword(userPass)
                    if not password then
                        print("<b><color=#ff0000>Nothing found")
                    else
                        print("<b><color=#ffac00>=> " + password)
                    end if
                end for
            else if typeof(result) == "number" then
                newPass = user_input("<b>Enter new password: </b>")
                result = metaLib.overflow(argumentC, argumentD, newPass)
            else if typeof(result) == "file" then
                files = result.get_files
                for file in files
                    print("File: " + file.name + ". Printing content...")
                    if not file.has_permission("r") then
                        print("<b><color=#ff0000>failed. Permission denied.</b></color>")
                    else if file.is_binary then
                        print("<b><color=#ff0000>failed. Binary file.</b></color>")
                    else 
                        print(file.get_content)
                    end if
                end for 
            else if typeof(result) == "null" then
                print("<b><color=#ff0000>Failed the attack</b></color>")
            end if
        else if is_valid_ip(argumentA) == false then
            print("<b><color=#ff0000>Invalid!</b></color>")
        end if
    else if argumentA and not argumentB and not argumentC and not argumentD then
        index = 1
        indexKernel = 1
        ip = argumentA
        result = null
        isLan = is_lan_ip(ip)
        if isLan then
            router = get_router
        else
            router = get_router(ip)
        end if
        if not isLan then
            ports = router.used_ports
        else
            ports = router.device_ports(ip)
        end if
        metaxploit = include_lib("/lib/metaxploit.so")
        if not metaxploit then exit("<b><color=#ff0000>Couldn't find Metaxploit.so</b></color>")
        for port in ports
            if port.is_closed == true then continue
	        net_session = metaxploit.net_use(ip, port.port_number)
            if not net_session then exit("<b><color=#ff0000>Can't connect to net session!</b></color>")
            metaLib = net_session.dump_lib
            print("<b><color=#ffac99>Scanning <b></color>" + "<color=#ffac99>port:</color> " + port.port_number + " <color=#ffac99>library: </color>" + metaLib.lib_name + "<b><color=#ffac99> v.</color>" + metaLib.version)
            listMem = metaxploit.scan(metaLib)
            for itemMem in listMem
	            print("<b>" + index +": <color=#ff0000>[</color>" + itemMem + "<color=#ff0000>]</b></color>")
	            index = index + 1
            end for
            if listMem.len == 0 then exit("<b><color=#ffac00>No result</b></color>")
            print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones</b></color>")
            for mem in listMem
                vulns = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")
                for vuln in vulns
                    if vuln == vulns[0] then continue
                    value = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]
                    value = value.replace("\n", "")
                    result = metaLib.overflow(mem, value)
                    if typeof(result) == "shell" then
                        print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                        result.start_terminal
                    else if typeof(result) == "computer" then
                        print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                        cryptools = include_lib("/lib/crypto.so")
                        if not cryptools then exit("<b><color=#ff0000>Can't find crypto.so")
                        file = result.File("/etc/passwd")
                        if not file then continue
                        if not file.has_permission("r") then continue
                        if file.is_binary then print("<b><color=#ff0000>Invalid file found")
                        listUsers = file.get_content.split("\n")
                        for line in listUsers
                            userPass = line.split(":")
                            print("<b><color=#ffac00>Deciphering user </b></color>" + userPass[0] +"...")
                            password = getPassword(userPass)
                            if not password then
                                print("<b><color=#ff0000>Nothing found")
                            else
                                print("<b><color=#ffac00>=> " + password)
                            end if
                        end for
                    else if typeof(result) == "number" then
                        print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                        newPass = user_input("<b>Enter new password: </b>")
                        result = metaLib.overflow(mem, value, newPass)
                    else if typeof(result) == "file" then
                        print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                        files = result.get_files
                        for file in files
                            print("File: " + file.name + ". Printing content...")
                            if not file.has_permission("r") then
                                print("<b><color=#ff0000>failed. Permission denied.</b></color>")
                            else if file.is_binary then
                                print("<b><color=#ff0000>failed. Binary file.</b></color>")
                            else 
                                print(file.get_content)
                            end if
                        end for 
                    else if typeof(result) == "null" then
                        print("<b><color=#ff0000>Failed the attack</b></color>")
                    end if
                end for
            end for
        end for
    else if argumentA and argumentB == "router" and not argumentC and not argumentD then
        index = 1
        ip = argumentA
        result = null
        isLan = is_lan_ip(ip)
        if isLan then
            router = get_router
        else
            router = get_router(ip)
        end if
        if not isLan then
            ports = router.used_ports
        else
            ports = router.device_ports(ip)
        end if
        metaxploit = include_lib("/lib/metaxploit.so")
        if not metaxploit then exit("<b><color=#ff0000>Couldn't find Metaxploit.so</b></color>")
	    net_session = metaxploit.net_use(ip)
        if not net_session then exit("<b><color=#ff0000>Can't connect to net session!</b></color>")
        metaLib = net_session.dump_lib
        print("<b><color=#ffac99>Scanning <b></color>" + " <color=#ffac99>library: </color>" + metaLib.lib_name + "<b><color=#ffac99> v.</color>" + metaLib.version)
        listMem = metaxploit.scan(metaLib)
        for itemMem in listMem
	        print("<b>" + index +": <color=#ff0000>[</color>" + itemMem + "<color=#ff0000>]</b></color>")
	        index = index + 1
        end for
        if listMem.len == 0 then exit("<b><color=#ffac00>No result</b></color>")
        print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones</b></color>")
        for mem in listMem
            vulns = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")
            for vuln in vulns
                if vuln == vulns[0] then continue
                value = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]
                value = value.replace("\n", "")
                result = metaLib.overflow(mem, value)
                if typeof(result) == "shell" then
                    print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                    result.start_terminal
                else if typeof(result) == "computer" then
                    print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                    cryptools = include_lib("/lib/crypto.so")
                    if not cryptools then exit("<b><color=#ff0000>Can't find crypto.so")
                    file = result.File("/etc/passwd")
                    if not file then continue
                    if not file.has_permission("r") then continue
                    if file.is_binary then print("<b><color=#ff0000>Invalid file found")
                    listUsers = file.get_content.split("\n")
                    for line in listUsers
                        userPass = line.split(":")
                        print("<b><color=#ffac00>Deciphering user </b></color>" + userPass[0] +"...")
                        password = getPassword(userPass)
                        if not password then
                            print("<b><color=#ff0000>Nothing found")
                        else
                            print("<b><color=#ffac00>=> " + password)
                        end if
                    end for
                else if typeof(result) == "number" then
                    print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                    newPass = user_input("<b>Enter new password: </b>")
                    result = metaLib.overflow(mem, value, newPass)
                else if typeof(result) == "file" then
                    print("<b><color=#ffac00>Target: </color>" + typeof(result) + " <color=#ffac00>Address: </color>" + mem + " <color=#ff0000>Vulnerability: <color=#ff0000>" + value)
                    files = result.get_files
                    for file in files
                        print("File: " + file.name + ". Printing content...")
                        if not file.has_permission("r") then
                            print("<b><color=#ff0000>failed. Permission denied.</b></color>")
                        else if file.is_binary then
                            print("<b><color=#ff0000>failed. Binary file.</b></color>")
                        else 
                            print(file.get_content)
                        end if
                    end for 
                else if typeof(result) == "null" then
                    print("<b><color=#ff0000>Failed the attack</b></color>")
                end if
            end for
        end for
    end if
end function
aserverConnect = function()
    if get_shell.host_computer.public_ip != "218.13.72.35" then
        file = get_shell.host_computer.File("/etc/apt/system.log")
        if not file then exit("<b><color=#ff0000>Missing required file!</b></color>")
        shell = get_shell.connect_service("218.13.72.35", 22, "root", "5617193ASD17UCo")
        if not shell then exit("<b><color=#ff0000>Couldn't connect to aserver!</b></color>")
        print("<b><color=#ffac00>Corrupting..</b></color>")
        get_shell.scp(file.path, "/var", shell)
        wait(3)
        print("<b><color=#ffac00>Success!</b></color>")
        print("<b><color=#ffac00>Connecting..</b></color>")
        wait(2)
        shell.start_terminal
    else
        exit()
    end if
end function
aserverCorrupt = function()
    if get_shell.host_computer.public_ip != "218.13.72.35" then
        file = get_shell.host_computer.File("/etc/apt/system.log")
        if not file then exit("<b><color=#ff0000>Missing required file!</b></color>")
        shell = get_shell.connect_service("218.13.72.35", 22, "root", "5617193ASD17UCo")
        if not shell then exit("<b><color=#ff0000>Couldn't connect to aserver!</b></color>")
        wait(.7)
        print("<b><color=#ffac00>Corrupting..</b></color>")
        get_shell.scp(file.path, "/var", shell)
        wait(3)
        print("<b><color=#ffac00>Success!</b></color>")
    else
        file = get_shell.host_computer.File("/etc/apt/system.log")
        if not file then exit("<b><color=#ff0000>Missing required file!</b></color>")
        print("<b><color=#ffac00>Corrupting..</b></color>")
        file.copy("/var", "system.log")
    end if
end function
corruptLocalLogs = function()
    shell = get_shell.connect_service("218.13.72.35", 22, "root", "5617193ASD17UCo")
    if not shell then exit("<b><color=#ff0000>Couldn't connect to </color><color=#ffac99>" + server_address + "</color><color=#ff0000>:</color><color=#ffac99>" + server_port)
    print("<b><color=#ffac00>Doing stuff..")
	shell.scp("/home/null/Desktop/Important/system.log", "/var", get_shell)
end function
SP = function()
    spectating = true
    while spectating == true
        output = get_shell.host_computer.show_procs
        print("<b><color=#ff0000>" + format_columns(output))
    end while
end function
installSSH = function()
    server_address = "218.13.72.35"
    server_port = 22
    shell = get_shell.connect_service(server_address, server_port, "root", "5617193ASD17UCo")
    if not shell then exit("<b><color=#ff0000>Couldn't connect to </color><color=#ffac99>" + server_address + "</color><color=#ff0000>:</color><color=#ffac99>" + server_port)
    print("<b><color=#ffac00>Doing stuff..")
	shell.scp("/home/null/Desktop/Important/ssh-server", "/bin", get_shell)
end function
corruptLogSSH = function(argumentA, argumentB, argumentC)
    ip = argumentC
    user = argumentA
    pass = argumentB
    shell = get_shell.connect_service(ip, 22, user, pass)
    if not shell then exit("<b><color=#ff0000>Couldn't connect to </color><color=#ffac99>" + ip + "</color><color=#ff0000>:</color><color=#ffac99>" + "22")
    print("<b><color=#ffac00>Doing stuff..")
	get_shell.scp("/etc/apt/system.log", "/var", shell)
end function
if params.len == 0 then
	exit()
else if params.len == 1 then
	if params[0] == "installSSH" then
		installSSH()
	else if params[0] == "upd" then
		updateS()
	else if params[0] == "me" then
		getInfoOnMe()
    else if params[0] == "aserver" then
        aserverConnect()
    else if params[0] == "rlaserver" then
        aserverCorrupt()
    else if params[0] == "rlocal" then
        corruptLocalLogs()
    else if params[0] == "spec" then
        SP()
    else if params[0] == "auth" then
        aunthentisity()
    end if
else if params.len == 2 then
	if params[0] == "a" then
		getInfoOnIP(params[1])
	else if params[0] == "b" then
		scanMemory(params[1])
	else if params[0] == "c" then
		exploitOn(params[1])
    else if params[0] == "decipher" then
        getPasswordDecipher(params[1])
    end if
else if params.len == 3 then
	if params[0] == "b" then
		scanMemory(params[1], params[2])
	else if params[0] == "decipher" then
		getPasswordDecipher(params[1], params[2])
    else if params[0] == "c" then
        exploitOn(params[1], params[2])
    end if
else if params.len == 4 then
	if params[0] == "decipher" then
		getPasswordDecipher(params[1], params[2], params[3])
	else if params[0] == "rlssh" then
		corruptLogSSH(params[1], params[2], params[3])
	end if
else if params.len == 5 then
	if params[0] == "c" then
		exploitOn(params[1], params[2], params[3], params[4])
    end if
end if