///-----------------------
///  commands:
///      help
///------
///      exit -
///      clear -
///      update -
///      ps - 
///      kill [pid] - 
///      cat [path] -
///      sudo [user@pass] -
///      decipher [hash] -
///      whois [ip] -     
///-----------------------Connection:
///      scon [user@pass] [ip] -
///-----------------------Logs:
///      rlhost -
///-----------------------Exploiting:
///      scan [ip] [--port] [#] -
///      show [#] -
///      exploit [ip] [--port] [--mem] [--vuln] [#] -
///-----------------------;
clear_screen
///*********************** -- vulnerabilities:
numberResults = []
shellResults = []
fileResults = []
computerResults = []
///*********************** -- booleans:
ableToUse = false
shownResults = false
///----------------------- -- libraries:
crypto = null
mxt = null
aptclient = null
///_______________________; -- help; input info:
helpInformation = "\n" + "<b><color=yellow>MAIN: </b></color>" + "\n" + "<b><color=white>help: show commands</b></color>" + "\n" + "<b><color=white>exit: exit program</b></color>" + "\n" + "<b><color=white>clear: clear terminal</b></color>" + "\n" + "<b><color=white>update: update libraries</b></color>" + "\n" + "<b><color=white>ps: show active processes</b></color>" + "\n" + "<b><color=white>kill [PID]: close process ID</b></color>" + "\n" + "<b><color=white>cat [path]: print file's content" + "\n" + "<b><color=white>sudo [user@pass]: switch user</b></color>" + "\n" + "<b><color=white>decipher [hash]: decipher hash" + "\n<b><color=yellow>CONNECTION:</b></color>" + "\n" + "<b><color=white>scon [user@pass] [ip] // [as/repo/g]: connect to machine safely</b></color>" + "\n" + "<b><color=yellow>ANTI-FORENSICS:</b></color>" + "\n" + "<b><color=white>rlhost: remove local logs</b></color>" + "\n" + "<b><color=white>rlServers: corrupt as/repo/g logs</b></color>" + "\n" + "<b><color=yellow>EXPLOITING: </b></color>" + "\n" + "<b><color=white>scan [ip] [--port]: search for vulnerabilities</b></color>" + "\n" + "<b><color=white>show: show found vulnerabilities</b></color>" + "\n" + "<b><color=white>exploit [ip] [--port] [--mem] [--vuln]: exploit on a lib</b></color>\n" + "<b><color=white>whois [ip]: get info on IP</b></color>"
inputInformation = "<b><color=white>{</color>" + get_router.public_ip + "<color=red>[</color>" + get_shell.host_computer.local_ip + "<color=red>]</color>" + "<color=white>}</color>" + "<color=yellow>:</b></color>" + "<color=white><b>{</color>" + active_user + "<color=white>}</color><color=yellow>> </color>"
///***********************; -- eMail:
eMailUser = "null@izantasa.org"
eMailPass = "5617193ASD17UCo"
eMail = null

nl = "                                                                                                                                                                                                                                                                                                                                                             "
///_______________________; -- servers:
aServerIP = "218.13.72.35"
aServerUser = "root"
aServerPass = "5617193ASD17UCo"

repoServerIP = "41.146.84.89"
repoServerUser = "root"
repoServerPass = "5617193ASD17UCo"

gServerIP = ""
gServerUser = "root"
gServerPass = "5617193ASD17UCo"
///***********************; -- authenticationData:
authLogin = "admin&admin"
authKey = "KPSrXYYydhribuk7DYrD-aBEbJKT9mYR29sg73g9z-uzWszpBF30qBA7f1uZnX-e56EsetMeeZp1nwYiLQz"
authKey2 = "pzoxicuvybasdfghjkl"
///***********************; -- shell:
pc = get_shell.host_computer
rs = null
///-----------------------; -- functions:
pendingUpdating = function(folderPath) /// checking versions, updating libraries
	pendingUpdate = []
	targetFolder = get_shell.host_computer.File(folderPath)
	if targetFolder != null then
		files = targetFolder.get_files
		for itemFile in files
			output = aptclient.check_upgrade(itemFile.path)
			if output == true then
				pendingUpdate.push(itemFile.name)
			end if
		end for
	end if
	return pendingUpdate
end function
exitX = function() /// exit hub function
    answer = (user_input("<b><color=white>Are you sure you want to quit? y/n: </color>"))
    if answer == "y" or answer == "yes" then
        clear_screen()
        exit()
    else if answer == "n" or answer == "no" then
        clear_screen()
        globals.ableToUse = true
    else
        clear_screen()
        exitX()
    end if
end function
updateLibraries = function() /// update libraries function
    if globals.aptclient == null then
        if not pc.File("/lib/aptclient.so") then
            apt = pc.File(user_input("<b><color=white>Path to aptclient.so: </b></color>"))
            if not apt then
                print("<b><color=red>Error! Couldn't find aptclient.so!</b></color>")
            else
                globals.aptclient = include_lib(apt.path)
                updateLibraries()
            end if
        else
            globals.aptclient = include_lib("/lib/aptclient.so")
            updateLibraries()
        end if
    else
        output = null 
        output = globals.aptclient.update
        if output then
            print("<b>" + output + "</b>")
        else
            PendingPackages = pendingUpdating("/lib") + pendingUpdating("/bin")
            if PendingPackages.len == 0 then
                print("<b><color=yellow>No updates needed")
            else
                counter = 0
                for itemPackage in PendingPackages
                    output = globals.aptclient.install(itemPackage)
                    if output == true then
                        counter = counter + 1
                    else if output then
                        print(output)
                    end if
                end for
            end if
        end if
    end if
end function
killProcess = function(pid) /// kill process function
    if not pid then
        print(helpInformation)
    else
        pc.close_program(pid.to_int)
    end if
end function
cat = function(path) /// print file's content function
    file = pc.File(path)
    if not file then
        print(helpInformation)
    else if not file.has_permission("r") then
        print("<b><color=red>Permission denied</b></color>")
    else if file.is_binary then
        print("<b><color=red>Can't open binary file</b></color>")
    else
        print("\n" + file.get_content + "\n")
    end if
end function
sudo = function(u_p) /// switch user function
    if u_p.indexOf("@") then
        us_p = u_p.split("@")
        if us_p[1].len > 0 then
            hs = get_shell(us_p[0], us_p[1])
            if hs then
                hs.start_terminal()
            else
                print("<b><color=red>Couldn't switch to " + us_p[0] + "@" + us_p[1])
            end if
        else
            print("<b><color=red>Invalid data</b></color>")
        end if
    else
        print(helpInformation)
    end if
end function
decipher = function(h)
    file = pc.File("/lib/crypto.so")
    if not file and globals.crypto == null then
        path = user_input("<b><color=white>Path to crypto.so: </b></color>")
        file = pc.File(path)
        if not file then
            print("<b><color=red>Couldn't find crypto.so</b></color>")
        else
            globals.crypto = include_lib(file.path)
            decipher(h)
        end if
    else if file and globals.crypto == null then
        globals.crypto = include_lib(file.path)
        pass = globals.crypto.decipher(h)
        if not pass then
            print("<b><color=red>Couldn't decipher </b></color>")
        else
            print(pass)
        end if
    else if not file and globals.crypto != null then
        pass = globals.crypto.decipher(h)
        if not pass then
            print("<b><color=red>Couldn't decipher </b></color>")
        else
            print(pass)
        end if
    else if file and globals.crypto != null then
        pass = globals.crypto.decipher(h)
        if not pass then
            print("<b><color=red>Couldn't decipher </b></color>")
        else
            print(pass)
        end if
    end if
end function
getInfoOn = function(ip)
    if is_valid_ip(ip) == true then
        isLan = is_lan_ip(ip)
        if isLan then
            router = get_router
            ports = router.device_ports(ip)
            if not router or not ports or not get_shell.ping(ip) then
                print("<b><color=red>Failed</b></color>")
            else
                print("<b><color=yellow>WHOIS: </b></color>\n" + whois(get_router.public_ip) + "\n<b><color=yellow>PORTS: </b></color>")
                portsColumns = "<b>PORT STATE SERVICE VERSION</b>"
                if ports.len == 0 then
                    print("<b><color=red>NO PORTS</b></color>")
                else
                    for port in ports
                        service_info = router.port_info(port)
                        port_status = "open"
                        portsColumns = portsColumns + "\n" + port.port_number + " " + port_status + " " + service_info
                    end for
                    if ports.len != 0 then
                        print(format_columns(portsColumns))
                    end if
                end if
                print("<b><color=yellow>KERNEL ROUTER: </b></color>\n" + router.kernel_version)
                print("<b><color=yellow>FIREWALL RULES: </b></color>\n" + router.firewall_rules + "\n")
            end if
        else if not isLan then
            router = get_router(ip)
            ports = router.used_ports
            if not router or not ports or not get_shell.ping(ip) then
                print("<b><color=red>Failed</b></color>")
            else
                print("<b><color=yellow>WHOIS: </b></color>\n" + whois(ip) + "\n<b><color=yellow>PORTS: </b></color>")
                portsColumns = "<b>PORT STATE SERVICE VERSION LAN</b>"
                if ports.len == 0 then
                    print("<b><color=red>NO PORTS</b></color>")
                else
                    for port in ports
                        service_info = router.port_info(port)
                        lan_ips = port.get_lan_ip
                        port_status = "open"
                        portsColumns = portsColumns + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
                    end for
                    if ports.len != 0 then
                        print(format_columns(portsColumns))
                    end if
                end if
                print("<b><color=#ffac00>KERNEL ROUTER: </b></color>\n" + router.kernel_version)
                print("<b><color=#ffac00>FIREWALL RULES: </b></color>\n" + router.firewall_rules + "\n")
            end if
        end if
    else if is_valid_ip(ip) == false then
        print("<b><color=red>Invalid IP")
    end if
end function
scon = function(u_p, ip)
    if is_valid_ip(ip) == true then
        if u_p.len > 0 and u_p.indexOf("@") then
            u_p = u_p.split("@")
            if u_p[0].len > 0 and u_p[1] > 0 then
                rs = get_shell.connect_service(ip, 22, u_p[0], u_p[1])
                if rs and pc.File("/").has_permission("w") then
                    pc.touch("/", "system.log")
                    file = pc.File("/system.log")
                    if file then
                        get_shell.scp("/system.log", "/var", rs)
                        answer = user_input("<b><color=white>Connect? y/n: </b></color>")
                        if answer == "y" or "yes" then
                            rs.start_terminal
                        else if answer == "n" or "no" then
                            globals.ableToUse = false
                        end if
                    else
                        print("<b><color=red>/ : Permission denied</b></color>")
                    end if
                else
                    print("<b><color=red>Couldn't connect to machine</b></color>")
                end if
            else
                print("<b><color=red>Invalid data!</b></color>")
            end if
        else
            print("<b><color=red>Invalid data!</b></color>")
        end if
    else
        print("<b><color=red>Invalid IP</b></color>")
    end if
end function
rlhost = function()
    if pc.File("/").has_permission("w") then
        pc.touch("/", "piggie")
        file = pc.File("/piggie")
        if not file then
            print("<b><color=red>Permission denied</b></color>")
        else
            file.move("/var", "system.log")
        end if
    else
        print("<b><color=red>Permission denied</b></color>")
    end if
end function
scanLibraries = function(ip, port)
    if is_valid_ip(ip) == true then
        if ip and port then
            if globals.mxt == null then
                if pc.File("/lib/metaxploit.so") then
                    globals.mxt = include_lib("/lib/metaxploit.so")
                    scanLibraries(ip, port)
                else
                    answer = user_input("<b><color=white>Path to metaxploit.so: </b></color>")
                    if pc.File(answer) and pc.File(answer).name == "metaxploit.so" then
                        globals.mxt = include_lib(answer)
                        scanLibraries(ip, port)
                    else
                        print("<b><color=red>Couldn't find metaxploit.so</b></color>")
                    end if
                end if
            else
                result = null
                if is_lan_ip(ip) == true then
                    router = get_router
                    ports = router.device_ports(ip)
                else if is_lan_ip(ip) == false then
                    router = get_router(ip)
                    ports = router.used_ports
                end if
                if not router or not ports or not get_shell.ping(ip) then
                    print("<b><color=red>Failed</b></color>")
                else
                    if ports.len == 0 then
                        print("<b><color=red>No ports found</b></color>")
                    else
                        net_session = globals.mxt.net_use(ip, port.to_int)
                        if not net_session then
                            print("<b><color=red>Couldn't connect</b></color>")
                        else
                            metaLib = net_session.dump_lib
                            print("<b><color=#ffac00>Scanning </color>" + "<color=#ffac99>port: </color><color=#ffac00>" + port.to_int + "</color> <color=#ffac99>library: </color><color=#ffac00>" + metaLib.lib_name + "</color><color=#ffac99> v.</color><color=#ffac00>" + metaLib.version)
                            listMem = globals.mxt.scan(metaLib)
                            if listMem.len == 0 then
                                print("<b><color=red>No result</b></color>")
                            else
                                print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones!</b></color>")
                                index = 1
                                for itemMem in listMem
                                    print("<b>" + index + ": <color=#ff0000>[</color>" + itemMem + "<color=#ff0000>]</b></color>")
                                    index = index + 1
                                end for
                                for mem in listMem
                                    print("<b><color=#ffac00>Target: </color>" + mem + "</b>")
                                    vulns = globals.mxt.scan_address(metaLib, mem).split("Unsafe check: ")
                                    for vuln in vulns
                                        if vuln == vulns[0] then continue
                                        value = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]
                                        value = value.replace("\n", "")
                                        result = metaLib.overflow(mem, value)
                                        if typeof(result) != null then
                                            if typeof(result) == "number" then
                                                numberResults.push("<b><color=#ffac00>" + ip + "</b></color> " + port.to_int + "<b> " + "password" + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                            else if typeof(result) == "shell" then
                                                shellResults.push("<b><color=#ffac00>" + ip + "</b></color>  " + port.to_int + "<b> " + typeof(result) + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                            else if typeof(result) == "file" then
                                                fileResults.push("<b><color=#ffac00>" + ip + "</b></color>  " + port.to_int + "<b> " + typeof(result) + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                            else if typeof(result) == "computer" then
                                                computerResults.push("<b><color=#ffac00>" + ip + "</b></color>  " + port.to_int + "<b> " + typeof(result) + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                            end if
                                        end if
                                    end for
                                end for
                            end if
                        end if
                    end if
                end if
            end if
        else if ip and not port then
            if globals.mxt == null then
                if pc.File("/lib/metaxploit.so") then
                    globals.mxt = include_lib("/lib/metaxploit.so")
                    scanLibraries(ip)
                else
                    answer = user_input("<b><color=white>Path to metaxploit.so: </b></color>")
                    if pc.File(answer) and pc.File(answer).name == "metaxploit.so" then
                        globals.mxt = include_lib(answer)
                        scanLibraries(ip)
                    else
                        print("<b><color=red>Couldn't find metaxploit.so</b></color>")
                    end if
                end if
            else
                result = null
                if is_lan_ip(ip) == true then
                    router = get_router
                    ports = router.device_ports(ip)
                else if is_lan_ip(ip) == false then
                    router = get_router(ip)
                    ports = router.used_ports
                end if
                if not router or not ports or not get_shell.ping(ip) then
                    print("<b><color=red>Failed</b></color>")
                else
                    if ports.len == 0 then
                        print("<b><color=red>No ports found</b></color>")
                    else
                        for port in ports
                            net_session = globals.mxt.net_use(ip, port.port_number)
                            if port.is_closed then
                                port_status = " <b>closed</b>"
                            else
                                port_status = " <b>open</b>"
                            end if
                            if not net_session then
                                print("<b><color=red>Error! Couldn't establish a net session!</color> " + port.port_number + "</b>" + port_status + "</b></color><b><color=#ff0000>. Port's service: " + router.port_info(port))
                            else
                                metaLib = net_session.dump_lib
                                print("<b><color=#ffac00>Scanning </color>" + "<color=#ffac99>port: </color><color=#ffac00>" + port.port_number + "</color> <color=#ffac99>library: </color><color=#ffac00>" + metaLib.lib_name + "</color><color=#ffac99> v.</color><color=#ffac00>" + metaLib.version)
                                listMem = globals.mxt.scan(metaLib)
                                if listMem.len == 0 then
                                    print("<b><color=#ffac00>No result!</b></color>")
                                else
                                    print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones!</b></color>")
                                    index = 1
                                    for itemMem in listMem
                                        print("<b>" + index +": <color=#ff0000>[</color>" + itemMem + "<color=#ff0000>]</b></color>")
                                        index = index + 1
                                    end for
                                    for mem in listMem
                                        print("<b><color=#ffac00>Target: </color>" + mem + "</b>")
                                        vulns = globals.mxt.scan_address(metaLib, mem).split("Unsafe check: ")
                                        for vuln in vulns
                                            if vuln == vulns[0] then continue
                                            value = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]
                                            value = value.replace("\n", "")
                                            result = metaLib.overflow(mem, value)
                                            if typeof(result) != null then
                                                if typeof(result) == "number" then
                                                    numberResults.push("<b><color=#ffac00>" + ip + "</b></color> " + port.port_number + "<b> " + "password" + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                                else if typeof(result) == "shell" then
                                                    shellResults.push("<b><color=#ffac00>" + ip + "</b></color>  " + port.port_number + "<b> " + typeof(result) + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                                else if typeof(result) == "file" then
                                                    fileResults.push("<b><color=#ffac00>" + ip + "</b></color>  " + port.port_number + "<b> " + typeof(result) + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                                else if typeof(result) == "computer" then
                                                    computerResults.push("<b><color=#ffac00>" + ip + "</b></color>  " + port.port_number + "<b> " + typeof(result) + "</b><b> " + mem + "<color=#ff0000> " + value + "</b></color>")
                                                end if
                                            end if
                                        end for
                                    end for
                                end if
                            end if
                        end for
                    end if
                end if
            end if
        end if
    else
        print("<b><color=red>Invalid IP</b></color>")
    end if
end function
show = function()
    for result in numberResults
        if numberResults != 0 then
            if globals.shownResults == false then
                computerResults = result.split(" ")
            end if
         end if
    end for
    for result in shellResults
        if shellResults.len != 0 then
            if globals.shownResults == false then
                computerResults = result.split(" ")
            end if
        end if
    end for
    for result in fileResults
        if fileResults.len != 0 then
            if globals.shownResults == false then
                computerResults = result.split(" ")
            end if
        end if
    end for
    for result in computerResults
        if computerResults.len != 0 then
            if globals.shownResults == false then
                computerResults = result.split(" ")
            end if
        end if
    end for
    print("<b><color=white>NUMBER: </color></b>" + numberResults + "\n" + "<b><color=white>SHELL: </color></b>" + shellResults + "\n" + "<b><color=white>FILE: </color></b>" + fileResults + "\n" + "<b><color=white>COMPUTER: </color></b>" + computerResults)
    globals.shownResults = true
end function
exploitOn = function(ip, port, mem, vuln)
    if is_valid_ip(ip) == true then
        if ip and port and mem and vuln then
            if globals.mxt == null then
                if pc.File("/lib/metaxploit.so") then
                    globals.mxt = include_lib("/lib/metaxploit.so")
                    exploitOn(ip, port, mem, vuln)
                else
                    answer = user_input("<b><color=white>Path to metaxploit.so: </b></color>")
                    if pc.File(answer) and pc.File(answer).name == "metaxploit.so" then
                        globals.mxt = include_lib(answer)
                        exploitOn(ip, port, mem, vuln)
                    else
                        print("<b><color=red>Couldn't find metaxploit.so</b></color>")
                    end if
                end if
            else
                net_session = globals.mxt.net_use(ip, port.to_int)
                if not net_session or not get_shell.ping(ip) then
                    print("<b><color=red>Couldn't connect</b></color>")
                else
                    metaLib = net_session.dump_lib
                    result = metaLib.overflow(mem, vuln)
                    if typeof(result) != null then
                        print("<b><color=yellow>Targeting: </color>" + typeof(result))
                        if typeof(result) == "shell" then
                            answer = user_input("<b><color=white>Connect to shell? y/n: </b></color>")
                            if answer == "y" or answer == "yes" then
                                result.start_terminal
                            else if answer == "n" or answer == "no" then
                                globals.ableToUse = true 
                            end if
                        else if typeof(result) == "number" then
                            newPass = user_input("<b><color=white>Enter new password: </b></color>")
                            result = metaLib.overflow(mem, vuln, newPass)
                        else if typeof(result) == "file" then
                            files = result.get_files
                            if not files then
                                print("<b><color=red>No result</b></color>")
                            else
                                for file in files
                                    print("<b><color=white>File: </color>" + file.name + ". <color=white>Printing content...</color>")
                                    if file.is_binary then
                                        print("<b><color=red>Failed. Binary file.</b></color>")
                                    else if not file.has_permission("r") then
                                        print("<b><color=red>Failed. Permission denied. </b></color>")
                                    else
                                        print(file.get_content)
                                    end if
                                end for
                            end if
                        else if typeof(result) == "computer" then
                            if globals.crypto == null then
                                if not pc.File("/lib/crypto.so") then
                                    path = user_input("<b><color=white>Path to crypto.so: </b></color>")
                                    if pc.File(path) and pc.File(path).name == "crypto.so" then
                                        globals.crypto = include_lib(path)
                                        exploitOn(ip, port, mem, vuln)
                                    else
                                        print("<b><color=red>Couldn't find crypto.so</b></color>")
                                    end if
                                else
                                    globals.crypto = include_lib("/lib/crypto.so")
                                    exploitOn(ip, port, mem, vuln)
                                end if
                            else
                                file = result.File(user_input("<b><color=white>Path to file: </b></color>"))
                                if not file then
                                    print("<b><color=red>Couldn't find file</b></color>")
                                else
                                    if not file.has_permission("r") then
                                        print("<b><color=red>Failed. Permission denied.</b></color>")
                                    else if file.is_binary then
                                        print("<b><color=red>Failed. Binary file.</b></color>")
                                    else
                                        print(file.get_content)
                                    end if
                                end if
                            end if
                        end if
                    end if
                end if
            end if
        else if ip and not port and not mem and not vuln then
            if globals.mxt == null then
                if pc.File("/lib/metaxploit.so") then
                    globals.mxt = include_lib("/lib/metaxploit.so")
                    exploitOn(ip)
                else
                    answer = user_input("<b><color=white>Path to metaxploit.so: </b></color>")
                    if pc.File(answer) and pc.File(answer).name == "metaxploit.so" then
                        globals.mxt = include_lib(answer)
                        exploitOn(ip)
                    else
                        print("<b><color=red>Couldn't find metaxploit.so</b></color>")
                    end if
                end if
            else
                result = null
                if is_lan_ip(ip) == true then
                    router = get_router
                    ports = router.device_ports(ip)
                else if is_lan_ip(ip) == false then
                    router = get_router(ip)
                    ports = router.used_ports
                end if
                if not router or not ports or not get_shell.ping(ip) or ports.len == 0 then
                    print("<b><color=red>Failed</b></color>")
                else
                    for port in ports
                        net_session = globals.mxt.net_use(ip, port.port_number)
                        if port.is_closed then
                            port_status = " <b>closed</b>"
                        else
                            port_status = " <b>open</b>"
                        end if
                        if not net_session then
                            print("<b><color=red>Failed. Couldn't connect</b></color>")
                        else
                            metaLib = net_session.dump_lib
                            print("<b><color=#ffac99>Scanning <b></color>" + "<color=#ffac99>port:</color> " + port.port_number + " <color=#ffac99>library: </color>" + metaLib.lib_name + "<b><color=#ffac99> v.</color>" + metaLib.version)
                            listMem = globals.mxt.scan(metaLib)
                            index = 1
                            for itemMem in listMem
                                print("<b>" + index +": <color=#ff0000>[</color>" + itemMem + "<color=#ff0000>]</b></color>")
                                index = index + 1
                            end for
                            if listMem.len == 0 then
                                print("<b><color=#ffac00>No result</b></color>")
                            else
                                print("<b><color=#ffac00>Issues in: </b></color>" + listMem.len + " <b><color=#ffac00>memory zones</b></color>")
                                for mem in listMem
                                    vulns = globals.mxt.scan_address(metaLib, mem).split("Unsafe check: ")
                                    for vuln in vulns
                                        if vuln == vulns[0] then continue
                                        value = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]
                                        value = value.replace("\n", "")
                                        result = metaLib.overflow(mem, value)
                                        if typeof(result) != null then
                                            print("<b><color=yellow>Targeting: </color>" + typeof(result))
                                            if typeof(result) == "shell" then
                                                answer = user_input("<b><color=white>Connect to shell? y/n: </b></color>")
                                                if answer == "y" or answer == "yes" then
                                                    result.start_terminal
                                                else if answer == "n" or answer == "no" then
                                                    print("<b><color=green>Skipped a shell</b></color>")
                                                end if
                                            else if typeof(result) == "number" then
                                                newPass = user_input("<b><color=white>Enter new password: </b></color>")
                                                result = metaLib.overflow(mem, value, newPass)
                                            else if typeof(result) == "file" then
                                                files = result.get_files
                                                if not files then
                                                    print("<b><color=red>No result</b></color>")
                                                else
                                                    for file in files
                                                        print("<b><color=white>File: </color>" + file.name + ". <color=white>Printing content...</color>")
                                                        if file.is_binary then
                                                            print("<b><color=red>Failed. Binary file.</b></color>")
                                                        else if not file.has_permission("r") then
                                                            print("<b><color=red>Failed. Permission denied. </b></color>")
                                                        else
                                                            print(file.get_content)
                                                        end if
                                                    end for
                                                end if
                                            else if typeof(result) == "computer" then
                                                if globals.crypto == null then
                                                    if not pc.File("/lib/crypto.so") then
                                                        path = user_input("<b><color=white>Path to crypto.so: </b></color>")
                                                        if pc.File(path) and pc.File(path).name == "crypto.so" then
                                                            globals.crypto = include_lib(path)
                                                            exploitOn(ip, port, mem, vuln)
                                                        else
                                                            print("<b><color=red>Couldn't find crypto.so</b></color>")
                                                        end if
                                                    else
                                                        globals.crypto = include_lib("/lib/crypto.so")
                                                        exploitOn(ip, port, mem, vuln)
                                                    end if
                                                else
                                                    file = result.File(user_input("<b><color=white>Path to file: </b></color>"))
                                                    if not file then
                                                        print("<b><color=red>Couldn't find file</b></color>")
                                                    else
                                                        if not file.has_permission("r") then
                                                            print("<b><color=red>Failed. Permission denied.</b></color>")
                                                        else if file.is_binary then
                                                            print("<b><color=red>Failed. Binary file.</b></color>")
                                                        else
                                                            print(file.get_content)
                                                        end if
                                                    end if
                                                end if
                                            end if
                                        end if
                                    end for
                                end for
                            end if
                        end if
                    end for
                end if
            end if
        end if
    else
        print("<b><color=red>Invalid IP</b></color>")
    end if
end function
///-----------------------; -- authentication
authentication = function()
    file = pc.File("/bin/check")
    if not file then
        login = user_input("<b><color=green>Login: </color>")
        if login != globals.authLogin then
            globals.mail = mail_login(globals.eMailUser, globals.eMailPass)
            if not globals.mail then
                exit("<b><color=red>Error!</b></color>")
            else
                if not pc.File("/etc/passwd") or not pc.File("/etc/passwd").has_permission("r") then
                    mail.send(eMailUser, "<b><color=red>Attempt to launch 6R1M</b></color>", "<b><color=red>Invalid login!</b></color>" + nl + nl + "<b><color=green>Login: </b></color>" + login + nl + "<b><color=green>Password: </b></color>null" + nl + "<b><color=red>System info: </b></color>" + nl + "<b><color=green>Public IP: </b></color>" + get_router.public_ip + nl + "<b><color=green>Local IP: </b></color>" + pc.local_ip + nl + "<b><color=green>Active user: </b></color>" + active_user + nl + "<b><color=green>Mail address: </b></color>" + user_mail_address + nl + "<b><color=green>Bank account: </b></color>" + user_bank_number + nl + "<b><color=green>Ports: </b></color>" + get_router.used_ports.len)
                    exit()
                else
                    mail.send(eMailUser, "<b><color=red>Attempt to launch 6R1M</b></color>", "<b><color=red>Invalid login!</b></color>" + nl + nl + "<b><color=green>Login: </b></color>" + login + nl + "<b><color=green>Password: </b></color>null" + nl + "<b><color=red>System info: </b></color>" + nl + "<b><color=green>Public IP: </b></color>" + get_router.public_ip + nl + "<b><color=green>Local IP: </b></color>" + pc.local_ip + nl + "<b><color=green>Active user: </b></color>" + active_user + nl + "<b><color=green>Mail address: </b></color>" + user_mail_address + nl + "<b><color=green>Bank account: </b></color>" + user_bank_number + nl + "<b><color=green>Ports: </b></color>" + get_router.used_ports.len + nl + nl + "<b><color=red>Passwords: </b></color>" + nl + pc.File("/etc/passwd").get_content)
                    exit()
                end if
            end if
        else if login == globals.authLogin then
            keyA = user_input("<b><color=green>Key: </color>")
            if keyA != globals.authKey then
                globals.mail = mail_login(globals.eMailUser, globals.eMailPass)
                if not globals.mail then
                    exit("<b><color=red>Error!</b></color>")
                else
                    if not pc.File("/etc/passwd") or not pc.File("/etc/passwd").has_permission("r") then
                        mail.send(eMailUser, "<b><color=red>Attempt to launch 6R1M</b></color>", "<b><color=red>Invalid keyA!</b></color>" + nl + nl + "<b><color=green>Login: </b></color>" + login + nl + "<b><color=green>Password: </b></color>null" + nl + "<b><color=red>System info: </b></color>" + nl + "<b><color=green>Public IP: </b></color>" + get_router.public_ip + nl + "<b><color=green>Local IP: </b></color>" + pc.local_ip + nl + "<b><color=green>Active user: </b></color>" + active_user + nl + "<b><color=green>Mail address: </b></color>" + user_mail_address + nl + "<b><color=green>Bank account: </b></color>" + user_bank_number + nl + "<b><color=green>Ports: </b></color>" + get_router.used_ports.len)
                        exit()
                    else
                        mail.send(eMailUser, "<b><color=red>Attempt to launch 6R1M</b></color>", "<b><color=red>Invalid keyA!</b></color>" + nl + nl + "<b><color=green>Login: </b></color>" + login + nl + "<b><color=green>Password: </b></color>null" + nl + "<b><color=red>System info: </b></color>" + nl + "<b><color=green>Public IP: </b></color>" + get_router.public_ip + nl + "<b><color=green>Local IP: </b></color>" + pc.local_ip + nl + "<b><color=green>Active user: </b></color>" + active_user + nl + "<b><color=green>Mail address: </b></color>" + user_mail_address + nl + "<b><color=green>Bank account: </b></color>" + user_bank_number + nl + "<b><color=green>Ports: </b></color>" + get_router.used_ports.len + nl + nl + "<b><color=red>Passwords: </b></color>" + nl + pc.File("/etc/passwd").get_content)
                        exit()
                    end if
                end if
            else if keyA == globals.authKey then
                pc.touch("/bin", "check")
                checkFile = pc.File("/bin/check")
                if not checkFile then
                    exit("<b><color=red>Error!</b></color>")
                else
                    checkFile.set_content("true")
                    clear_screen()
                    print("<b><color=green>Successfully logged in!</b></color>")
                    globals.ableToUse = true
                end if
            end if
        end if
    else if file then
        if not file.has_permission("r") then
            exit("<b><color=red>Error!</b></color>")
        else
            if file.get_content == "false" then
                file.delete
                authentication()
            else if file.get_content == "true" then
                keyA = user_input("<b><color=yellow>Key: </color>")
                if keyA != globals.authKey2 then
                    globals.mail = mail_login(globals.eMailUser, globals.eMailPass)
                    if not globals.mail then
                        exit("<b><color=red>Error!</b></color>")
                    else
                        if not pc.File("/etc/passwd") or not pc.File("/etc/passwd").has_permission("r") then
                            mail.send(eMailUser, "<b><color=red>Attempt to launch 6R1M</b></color>", "<b><color=red>Invalid passB!</b></color>" + nl + nl + "<b><color=green>Login: </b></color>" + " " + nl + "<b><color=green>Password: </b></color>" + keyA + nl + "<b><color=red>System info: </b></color>" + nl + "<b><color=green>Public IP: </b></color>" + get_router.public_ip + nl + "<b><color=green>Local IP: </b></color>" + pc.local_ip + nl + "<b><color=green>Active user: </b></color>" + active_user + nl + "<b><color=green>Mail address: </b></color>" + user_mail_address + nl + "<b><color=green>Bank account: </b></color>" + user_bank_number + nl + "<b><color=green>Ports: </b></color>" + get_router.device_ports(pc.local_ip).len)
                            exit()
                        else
                            mail.send(eMailUser, "<b><color=red>Attempt to launch 6R1M</b></color>", "<b><color=red>Invalid passB!</b></color>" + nl + nl + "<b><color=green>Login: </b></color>" + " " + nl + "<b><color=green>Password: </b></color>" + keyA + nl + "<b><color=red>System info: </b></color>" + nl + "<b><color=green>Public IP: </b></color>" + get_router.public_ip + nl + "<b><color=green>Local IP: </b></color>" + pc.local_ip + nl + "<b><color=green>Active user: </b></color>" + active_user + nl + "<b><color=green>Mail address: </b></color>" + user_mail_address + nl + "<b><color=green>Bank account: </b></color>" + user_bank_number + nl + "<b><color=green>Ports: </b></color>" + get_router.device_ports(pc.local_ip).len + nl + nl + "<b><color=red>Passwords: </b></color>" + nl + pc.File("/etc/passwd").get_content)
                            exit()
                        end if
                    end if
                else if keyA == globals.authKey2 then
                    clear_screen()
                    print("<b><color=green>Successfully logged in!</b></color>")
                    globals.ableToUse = true
                end if
            end if
        end if
    end if
end function
authentication()
///**********************--; main:
while ableToUse == true
    cmd = user_input(inputInformation)
    prms = cmd.split(" ")
    if prms.len == 1 then
        if prms[0] == "help" then
            print(helpInformation)
        else if prms[0] == "exit" then
            exitX()
        else if prms[0] == "c" or prms[0] == "clear" then
            clear_screen()
        else if prms[0] == "update" then
            updateLibraries()
        else if prms[0] == "ps" then
            print("\n" + pc.show_procs + "\n")
        else if prms[0] == "rlhost" then
            rlhost()
        else if prms[0] == "show" then
            show()
        else
            print(helpInformation + "\n")
        end if
    else if prms.len == 2 then
        if prms[0] == "kill" then
            killProcess(prms[1])
        else if prms[0] == "cat" then
            cat(prms[1])
        else if prms[0] == "sudo" then
            if prms[1].len > 0 then
                sudo(prms[1])
            else
                print(helpInformation)
            end if
        else if prms[0] == "decipher" then
            if prms[1].len > 0 then
                decipher(prms[1])
            end if
        else if prms[0] == "whois" then
            getInfoOn(prms[1])
        else if prms[0] == "scan" then
            globals.numberResults = []
            globals.shellResults = []
            globals.fileResults = []
            globals.computerResults = []
            shownResults = false
            scanLibraries(prms[1])
        else if prms[0] == "exploit" then
            exploitOn(prms[1])
        else
            print(helpInformation)
        end if
    else if prms.len == 3 then
        if prms[0] == "scon" then
            scon(prms[1], prms[2])
        else if prms[0] == "scan" then
            globals.numberResults = []
            globals.shellResults = []
            globals.fileResults = []
            globals.computerResults = []
            shownResults = false
            scanLibraries(prms[1], prms[2])
        end if
    else if prms.len == 5 then
        if prms[0] == "exploit" then
            exploitOn(prms[1], prms[2], prms[3], prms[4])
        end if
    end if
end while